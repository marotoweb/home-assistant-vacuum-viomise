# This is the name of the workflow, which will be displayed on the Actions tab of your GitHub repository.
name: Create and publish Release

# This 'on' block defines the trigger for the workflow.
on:
  push:
    # The workflow will only run when a new tag is pushed to the repository.
    tags:
      - 'v*' # This pattern matches any tag that starts with 'v', e.g., v1.0, v2025.10.19

# 'jobs' defines a sequence of tasks to be executed.
jobs:
  # This is the first job, responsible for updating the manifest.json and creating the release.
  create_release_from_tag:
    name: Create Release
    # The job will run on the latest version of an Ubuntu virtual machine.
    runs-on: ubuntu-latest
    steps:
      # Check out the repository's code.
      # We explicitly check out the 'main' branch.
      # This ensures that we are on a branch and can push commits,
      # avoiding the "detached HEAD" state that occurs when checking out a tag.
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: 'v2' # Or your default branch name

      # Update the version number in manifest.json.
      # This is a crucial step for HACS. It reads the new version from the Git tag
      # and updates the "version" field in the manifest.json file.
      - name: Commit updated manifest
        run: |
          # Configure git with a user name and email for the commit.
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Extract the clean version number from the tag (e.g., "v2025.10.19" becomes "2025.10.19").
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/v,,')
          
          # Use 'sed' to find and replace the version line in the manifest.json file.
          sed -i 's/"version": ".*"/"version": "'$VERSION'"/' custom_components/viomise/manifest.json
          
          # Stage the changed file, commit it, and push it back to the repository.
          git add custom_components/viomise/manifest.json
          git commit -m "Bump version to $VERSION"
          git push

      # Create the GitHub Release.
      # This action uses the tag information to create a corresponding release page.
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          # The GITHUB_TOKEN is a secret automatically provided by GitHub Actions.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # 'tag_name' is the tag that triggered the workflow.
          tag_name: ${{ github.ref }}
          # 'release_name' is the title of the release page.
          release_name: Release ${{ github.ref }}
          # 'body' is the description of the release.
          body: |
            This is an automatically created release from tag ${{ github.ref }}.
          # 'draft: false' means the release will be published immediately.
          draft: false
          # 'prerelease' is set to 'true' if the tag name contains 'alpha', 'beta', or 'rc'.
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  # This is the second job, which creates the .zip file asset and attaches it to the release.
  release_zip_file:
    name: Prepare release asset
    runs-on: ubuntu-latest
    needs: [create_release_from_tag]
    steps:
      # Check out the repository's code again for this job.
      - name: Check out repository
        uses: actions/checkout@v4

      # Create a .zip file of the integration's source code.
      - name: ZIP files
        run: |
          cd custom_components/viomise
          zip -r ../../viomi_se.zip .
          ls -lh ../../viomi_se.zip

      # Upload the created .zip file to the GitHub Release.
      - name: Upload zip to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: viomi_se.zip
          asset_name: viomi_se.zip
          tag: ${{ github.ref }}
          overwrite: true
